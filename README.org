* RedBaron4emacs

POC  for python  code manipulation  with  a Full  Syntax Tree.  That's
better than regexps.

RedBaron: [[https://redbaron.readthedocs.org/en/latest/tuto.html][https://redbaron.readthedocs.org/en/latest/tuto.html]]

** Install

This library is based on RedBaron:
: pip install redbaron

You need =hydra.el=  (in [[http://wikemacs.org/wiki/Melpa][Melpa]], that's optionnal but real handy) and
helm (for =helm-imenu=).

For the moment,  clone this repository and  load =red4emacs.el=. Doing
so will set the  path to the python code that  lives alongside it (see
=red4emacs-path=).

** Usage

The one command to know to see all options:
: M-x red4e-hydra/body

#+BEGIN_HTML
 <img src="demo.gif" </img>
#+END_HTML

*** Add an argument
Inside  a function,  call  =M-x red4e-add-arg  RET  whatever RET=.  It
replaces the method definition with a new one.

*** Rename an argument

: M-x red4e-rename-arg

Renaming an argument will ask you  to search and replace it inside the
method body.

*** Rename the current method

: M-x red4e-rename-method
or
: M-x red4e-rename-method-in-project

Or =f= and =F= respectively with the hydra.

The second  choice will ask you  to search and replace  this method in
the current project (based on [[https://github.com/bbatsov/projectile][projectile']]s =projectile-replace=).

*** Move around defs with helm-imenu

The hydra has the =i= binding to call =helm-imenu=, so you can jump to
another def and carry on using red4e.

*** Rename a symbol inside the current defun
=S= in the hydra. It's a simple search and replace inside the method body.

*** Add a decorator
You can add a decorator to the current method:
: M-x red4e-decorator-add

Or =@= with the hydra.

It will suggest  a list of decorators used in  the current buffer.  As
usual,  you can  bypass the  ido prompt  with =C-f=  and type  another
one. In that case, you can omit the "@".

If we  choose "@staticmethod", then  it removes "self" from  the method
signature.

This function doesn't use the redbaron python library.
** Motivation

take the  string =def  foo(first, **kwargs, second=foo):  pass=, where
the arguments are in a bad order, and sort them:

: def foo(first, second=foo, **kwargs): pass

Call that from within emacs, use with my snippet to add an argument to
a function, and it becomes a bit simpler (no more movements around the
code) and smarter (we manipulate =code=, not text with clunky regexps)
to add an argument to a method.
